# global and defaults sections can be ignored for this config reference, these are the defaults
global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
	log	global
	mode	http
	option	httplog
	option	dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http

frontend splunkhec
	# binding on port 80 for this example only
	bind :80

	# this first check is looking for an authorization header at all
	http-request deny content-type 'text/html' string 'Missing Authorization HTTP header - must be OAuth' unless { req.hdr(authorization) -m found }

	# get header part of the JWT
	http-request set-var(txn.alg) http_auth_bearer,jwt_header_query('$.alg')

	# get payload part of the JWT
	http-request set-var(txn.iss) http_auth_bearer,jwt_payload_query('$.iss')
	http-request set-var(txn.aud) http_auth_bearer,jwt_payload_query('$.aud')
	http-request set-var(txn.exp) http_auth_bearer,jwt_payload_query('$.exp','int')
	http-request set-var(txn.scope) http_auth_bearer,jwt_payload_query('$.scope')

	# Validate the JWT
	http-request deny content-type 'text/html' string 'Unsupported JWT signing algorithm' unless { var(txn.alg) -m str RS256 }
	http-request deny content-type 'text/html' string 'Invalid JWT issuer' unless { var(txn.iss) -m str https://issuer.example.com }
	http-request deny content-type 'text/html' string 'Invalid JWT audience' unless { var(txn.aud) -m str https://audience.example.com }
	
	# this is checking against the pubkey, probably most important step since this can't be spoofed
	http-request deny content-type 'text/html' string 'Invalid JWT signature' unless { http_auth_bearer,jwt_verify(txn.alg,"certs/examplepubkey.pem") -m int 1 }

	# this is checking to make sure the token is not expired
	http-request set-var(txn.now) date()
	http-request deny content-type 'text/html' string 'JWT has expired' if { var(txn.exp, sub(txn.now) -m int lt 0 }

	# using token audience to determine splunk token to use (or none if token audience doesn't match so then will fail at splunk level)
	http-request set-header Authorization "Splunk %[var(txn.aud),map(maps/splunktokens.map,none)]"

	# OPTIONAL: Deny requests that lack sufficient permissions - another method of token -> Splunk HEC management
	# http-request deny if { method GET } ! { var(txn.scope) -m sub read }
	# http-request deny if { method POST } ! { var(txn.scope) -m sub write }

	# could add more mappings here to pick different clusters based on the various criteria available
	default_backend splunkidx

backend splunkidx
	balance roundrobin
	server idx1 127.0.0.1:8088 ssl verify none
